# conftest.py

"""Configuration file for pytests."""

import pytest
from textwrap import dedent

@pytest.fixture
def mock_fastq() -> str:
    mock_sequencing_data = dedent("""\
    @M04529:474:000000000-DL87J:1:1101:15739:1331 1:N:0:0
    CTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGACTCGGAACAGCATACGTACCCCAGGTACGTGCAGTCGCAGAGGAAAGGAAGCCCTGCTTCCTCCACCAGAACAGCATACGTACCCCAGGTACGTGCAGTCGCAGAGGAAAGGAAGCCCTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTCCTGAGCATCTCGTATGCCGTCTTCGGCTTGCAAAAAAAACTCTACTCGTGTCTTCAGCTCTTGTCCGTGTTTCTTTTATGTTTTGTATCTGCTT
    +
    BBBBAFFBBAFFGFGFGCGGGGGGGGGHHGFFHHGHGGDGGGGG?FGHHHHHGGHHHHGGHGGGHHGGHHHHHHHFGGGGHGHHFFC?FFHGHHHHHHHGHHHFBFGHGH2FHFFGHHHDFHEHHFGGHFHGGCFHHGFA@CECHGFHFHGFGHH<CFFEHGGFFHEGFHHHGGG-.:BFGG;FFFFFFAFFFGGGFEGDAFD.FFFGBFFFFBFFFFFFFDFF;;EEA9;DAD/BFFFFFF/BFBFFEFFF//-9@.;/..-9-;.///9:9@-.//9////...../;///;9/9//9//....9;/;//////;;/..;/:////;
    @M04529:474:000000000-DL87J:1:1101:15700:1332 1:N:0:0
    CTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGACTCGGAACAGCATACGTACCCCAGGTACGTGCAGTCGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACCGTACTAGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAATAAGATGACACTTCTCTGTTCTTCATTCTACATCTAGTGTATTTCGCAGTGCTCGTTCTACTC
    +
    BBBCCFFEEEFFGGGGGGGGGGGGGGGHHGHHHHHHHGGGGGGGGGGHHHHHHHHHHHGHHGGGHHHGHHHHHHHGGGGGHGHHHHHHHHHHHHHHHHHHHHHHHHHGGGGGGGGGGGGHHGHHHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHGGGGGGGGGHGHHGGGGGGGGGGGGHHHHGGGGFFFFFHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFHFF0BFFFFFF<<:0111<110000101011<1B1B11111111111<1111111:11/9..<01<1.-<.<1110
    """)

    return mock_sequencing_data

@pytest.fixture
def mock_fastq_with_invalid_recordings() -> str:
    mock_sequencing_data = dedent("""\
    @M04529:474:000000000-DL87J:1:1101:14997:1517 1:N:0:0
    CTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTCCTGAGCATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAACCACACACCCTACTGCTCCTGACCACAGATTCTACTGGAATATGATTCCAGTATGTCCTATCTTGTGCACTGCTCTTGCTGCCACACTCTGTTCTTT
    +
    @M04529:474:000000000-DL87J:1:1101:15739:1331 1:N:0:0
    CTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGACTCGGAACAGCATACGTACCCCAGGTACGTGCAGTCGCAGAGGAAAGGAAGCCCTGCTTCCTCCACCAGAACAGCATACGTACCCCAGGTACGTGCAGTCGCAGAGGAAAGGAAGCCCTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTCCTGAGCATCTCGTATGCCGTCTTCGGCTTGCAAAAAAAACTCTACTCGTGTCTTCAGCTCTTGTCCGTGTTTCTTTTATGTTTTGTATCTGCTT
    +
    BBBBAFFBBAFFGFGFGCGGGGGGGGGHHGFFHHGHGGDGGGGG?FGHHHHHGGHHHHGGHGGGHHGGHHHHHHHFGGGGHGHHFFC?FFHGHHHHHHHGHHHFBFGHGH2FHFFGHHHDFHEHHFGGHFHGGCFHHGFA@CECHGFHFHGFGHH<CFFEHGGFFHEGFHHHGGG-.:BFGG;FFFFFFAFFFGGGFEGDAFD.FFFGBFFFFBFFFFFFFDFF;;EEA9;DAD/BFFFFFF/BFBFFEFFF//-9@.;/..-9-;.///9:9@-.//9////...../;///;9/9//9//....9;/;//////;;/..;/:////;
    @M04529:474:000000000-DL87J:1:1101:8789:6328 1:N:0:0
    CTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGACTCGGAACAGCATACGTACCCCAGGTACGTGCATTTTCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACCGTACTAGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAAACTTACATTCTTGCTGTCATGGCTTATGATCGATCACGTTATACCCTGTTGCGGTTCTAT
    +
    DDDDDFFDDCFFGGGGGGGGGGGGGGGHHGHHHHHHHGGGGGGGGGGHHHHHHHHHHHGHHGGGHHHGHHHH5F44BGHHHGHHHHHHHHHHHHHHHHHHHHHHHHHGGGGGGGGGGGGHHGHHHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGHHHHGGGHGGGGGGGGGGGGGGHHGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFHHHFFFF
    """)

    return mock_sequencing_data

@pytest.fixture
def mock_barcode_dict() -> dict:
    mock_barcode_dict = {"AAAA": 1, "TTAC": 2, "CACT": 3, "GTCG": 4, "ATTT": 5, "TATG": 6, "CTGA": 7, "GAGC": 8, "GGAT": 9, "CCAG": 10, "TGCA": 11, "ACCC": 12}

    return mock_barcode_dict

@pytest.fixture
def mock_settings(mock_barcode_dict) -> dict:
    mock_settings = {"spacer": "GGCCCAGACTGAGCACGTGA",
                     "h1": "CAGAGGAAAGGAAGCCCTGCTTCCTCCA",
                     "h2": "AACAGCATACGTACCCCAGGTACGTGCA",
                     "s1": "TGA",
                     "s2": "ACT",
                     "l": 20,
                     "D": mock_barcode_dict,
                     "parity": 6}

    return mock_settings

@pytest.fixture
def mock_codes_from_fastq() -> list[int]:
    mock_codes_from_fastq = [172, 4]

    return mock_codes_from_fastq

@pytest.fixture
def mock_codes_from_fastq_with_invalid_recordings() -> list[int]:
    mock_codes_from_fastq = [172]

    return mock_codes_from_fastq